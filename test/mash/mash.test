set auto_path [linsert $auto_path 0 [file join [file dirname [info script]] "../../mash.vfs/lib"]]

package require tcltest
package require mash

namespace eval ::mash::test {
	namespace import ::tcltest::*

	#------------------------------------------------------------
	test create_a_rule_with_name {
		} -body {
			mash::rule add {"testname" {
				test:"testname"
			} cmd {
				-fasdkdk: test
			}}
			return [struct::record show values [lindex $mash::Rules 0]]
		} -result {-name testname -attrs {
				test:"testname"
			} -modules {cmd {
				-fasdkdk: test
			}}}

	#------------------------------------------------------------
	test create_a_rule_without_name {
		} -body {
			mash::rule add {
				test:"testname"
			} cmd {
				-fasdkdk: test
			}
			return [struct::record show values [lindex $mash::Rules 1]]
		} -result {-name default -attrs {
				test:"testname"
			} -modules {cmd {
				-fasdkdk: test
			}}}

	#------------------------------------------------------------
	test create_a_rule_with_more_modules {
		} -body {
			mash::rule add "testname" {
				test:"testname"
			} cmd {
				-fasdkdk: test
			} cmd_1 {
				-fas: test
			}
			return [struct::record show values [lindex $mash::Rules 2]]	
		} -result {-name testname -attrs {
				test:"testname"
			} -modules {cmd {
				-fasdkdk: test
			} cmd_1 {
				-fas: test
			}}}

	#------------------------------------------------------------
	test find_rule_by_single_name {
		} -body {
			set foundTasks [mash::rule get {testname}]
			return $foundTasks
		} -result {::mash::RULE0 ::mash::RULE2}

	#------------------------------------------------------------
	test find_rules_by_multiple_names {
		} -body {
			mash::rule add "testname-1" {
				test:"testname"
			} cmd {
				-fasdkdk: test
			}
			set foundTasks [mash::rule get {testname-1 testname}]
			return $foundTasks
		} -result {::mash::RULE3 ::mash::RULE0 ::mash::RULE2}

	#------------------------------------------------------------
	test find_rules_by_multiple_double_names {
		} -body {
			mash::rule add "testname" {
				test:"testname"
			} cmd {
				-fasdkdk: test
			}
			set foundTasks [mash::rule get {testname-1 testname}]
			return $foundTasks
		} -result {::mash::RULE3 ::mash::RULE0 ::mash::RULE2 ::mash::RULE4}

	#------------------------------------------------------------
	test find_mashfiles_by_pattern {
	} -body {
		makeFile "" test.mk
		mash::findMashfiles [temporaryDirectory] "test.mk"
	} -result {/Users/markusmarx/Development/terminal.lab/mash/test/mash/test.mk} -cleanup {
		removeFile test.mk
	}

	#------------------------------------------------------------
	test find_mashfiles_by_pattern_with_subdir {
	} -body {
		set tmp1 [makeDirectory test1]
		makeFile "" test.mk $tmp1
		mash::findMashfiles [temporaryDirectory] "test.mk"
	} -result {/Users/markusmarx/Development/terminal.lab/mash/test/mash/test1/test.mk} -cleanup {
		removeDirectory test1
	}

	#------------------------------------------------------------
	test find_mashfiles_by_pattern_with_more_subdirs {
	} -body {
		set tmp1 [makeDirectory test1]
		set tmp2 [makeDirectory test2]
		makeFile "" test.mk $tmp1
		makeFile "" test.mk $tmp2
		mash::findMashfiles [temporaryDirectory] "*.mk"
	} -result {/Users/markusmarx/Development/terminal.lab/mash/test/mash/test1/test.mk\
		/Users/markusmarx/Development/terminal.lab/mash/test/mash/test2/test.mk} -cleanup {
		removeDirectory test1
		removeDirectory test2
	}

	#------------------------------------------------------------
	test sort_filepaths {
	} -body {
		mash::pathSort {/test/test/test /test /test/test /test/test1}
	} -result {/test /test/test /test/test1 /test/test/test}


}